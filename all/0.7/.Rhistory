)
dev.off()
# Subgroup - frequency
m.gen_sham_fre <- update.meta(m.gen,
subgroup = data_control$frequency,
tau.common = TRUE)
sink(file.path(resultPathPost, param, "subgroup", paste(param, "_fre-meta-analysis.txt", sep = ""), fsep = "\\")); print(m.gen_sham_fre); sink()
png(file = file.path(resultPathPost, param, "subgroup", paste(param, "_fre_forestplot.png", sep = "")), width = 3500, height = 2600, res = 300)
forest.meta(m.gen_sham_fre,
layout = "meta",
sortvar = TE,
print.tau2 = TRUE,
prediction = TRUE,
leftlabs = c("Study"),
leftcols = c("studlab"),
colgap.forest.left = "7cm",
colgap.forest.right = "2cm",
xlim = c(-3, 3)
)
dev.off()
# # Subgroup - pulse width
#
# m.gen_pulse <- update.meta(m.gen,
#                            subgroup = data_control$pulse.width,
#                            tau.common = TRUE)
#
# sink(file.path(resultPathPost, param, "subgroup", paste(param, "_pulse-meta-analysis.txt", sep = ""), fsep = "\\")); print(m.gen_pulse); sink()
#
# png(file = file.path(resultPathPost, param, "subgroup", paste(param, "_pulse_forestplot.png", sep = "")), width = 3500, height = 2600, res = 300)
# forest.meta(m.gen_pulse,
#             layout = "meta",
#             sortvar = TE,
#             print.tau2 = TRUE,
#             prediction = TRUE,
#             leftlabs = c("Study"),
#             leftcols = c("studlab"),
#             colgap.forest.left = "7cm",
#             colgap.forest.right = "2cm",
#             xlim = c(-3, 3)
# )
# dev.off()
# Subgroup - Stim Type
m.gen_stim_type <- update.meta(m.gen,
subgroup = data_control$stim.type,
tau.common = TRUE)
sink(file.path(resultPathPost, param, "subgroup", paste(param, "_StimType-meta-analysis.txt", sep = ""), fsep = "\\")); print(m.gen_stim_type); sink()
png(file = file.path(resultPathPost, param, "subgroup", paste(param, "_stim_type_forestplot.png", sep = "")), width = 3500, height = 2600, res = 300)
forest.meta(m.gen_stim_type,
layout = "meta",
sortvar = TE,
print.tau2 = TRUE,
prediction = TRUE,
leftlabs = c("Study"),
leftcols = c("studlab"),
colgap.forest.left = "7cm",
colgap.forest.right = "2cm",
xlim = c(-3, 3)
)
dev.off()
# Publication_Bias --------------------------------------------------------
# Produce funnel plot
png(file = file.path(resultPathPost, param, paste(param, "_funnel.png", sep = "")), width = 3500, height = 2600, res = 300)
funnel.meta(m.gen,
studlab = T)
# Add title
title("Funnel Plot")
dev.off()
# contour-enhanced funnel plots -------------------------------------------
#Such plots can help distinguish publication bias from other forms of asymmetry
png(file = file.path(resultPathPost, param, paste(param, "_funnel_enhanced.png", sep = "")), width = 3500, height = 2600, res = 300)
# Define fill colors for contour
col.contour = c("gray50", "gray85", "gray95")
funnel.meta(m.gen,
contour = c(0.9, 0.95, 0.99),
col.contour = col.contour)
# Add a legend
legend(x = 0.43, y = -0.009,
legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
fill = col.contour)
# Add a title
title("Contour-Enhanced Funnel Plot")
dev.off()
# Eager's Regression Test for further investigating bias
eggTest <- eggers.test(m.gen)
sink(file.path(resultPathPost, param, "influence", paste(param, "_eggersTest.txt", sep = ""), fsep = "\\")); print(eggTest); sink()
# outlier detect ----------------------------------------------------------
findOut <- find.outliers(m.gen)
sink(file.path(resultPathPost, param, "influence", paste(param, "_outlierDetect.txt", sep = ""), fsep = "\\")); print(findOut); sink()
m.gen.inf <- InfluenceAnalysis(m.gen, random = TRUE)
infSum <- summary(m.gen.inf)
sink(file.path(resultPathPost, param, "influence", paste(param, "_sensitivityAnalysis.txt", sep = ""), fsep = "\\")); print(infSum); sink()
#The InfluenceAnalysis function creates four influence diagnostic plots:
# a Baujat plot, influence diagnostics according to Viechtbauer and Cheung (2010),
#and the leave-one-out meta-analysis results, sorted by effect size and
#I^2value. We can open each of these plots individually using the plot function
png(file = file.path(resultPathPost, param, "influence", paste(param, "_baujat.png", sep = "")), width = 3500, height = 2600, res = 300)
plot(m.gen.inf, "baujat")
dev.off()
png(file = file.path(resultPathPost, param, "influence", paste(param, "_influence.png", sep = "")), width = 3500, height = 2600, res = 300)
plot(m.gen.inf, "influence")
dev.off()
#Leave-One-Out Meta-Analysis Results
png(file = file.path(resultPathPost, param, "influence", paste(param, "_es_leave_one_out.png", sep = "")), width = 3500, height = 2600, res = 300)
plot(m.gen.inf, "es")
dev.off()
png(file = file.path(resultPathPost, param, "influence", paste(param, "_i2_leave_one_out.png", sep = "")), width = 3500, height = 2600, res = 300)
plot(m.gen.inf, "i2")
dev.off()
# Checking for Multi-Collinearity
if (param != "PNN50"){
data_control$pulse.width <- as.numeric(data_control$pulse.width)
data_control$rms.value <- data_control$rms.value * 1000
data_control$charge.per.session <- data_control$charge.per.session * 1000
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_Multi-Collinearity.png", sep = "")), width = 3500, height = 2600, res = 300)
data_control[,c("male.ratio",
"age.total",
"rms.value",
"charge.per.session",
"frequency",
"pulse.width")] %>% chart.Correlation(histogram = T)
dev.off()
# Meta-regression
m.charge <- rma(yi = es,
sei = se,
data = data_control,
method = "ML",
mods = charge.per.session,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_chargeReg.txt", sep = ""), fsep = "\\")); print(m.charge); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_charge_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
Charge.Per.Session <- data_control$charge.per.session
m.gen.reg <- metareg(m.gen, Charge.Per.Session)
bubble(m.gen.reg, studlab = F)
dev.off()
m.rms <- rma(yi = es,
sei = se,
data = data_control,
method = "ML",
mods = rms.value,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_rmsReg.txt", sep = ""), fsep = "\\")); print(m.rms); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_rms_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
RMS.Value <- data_control$rms.value
m.gen.reg <- metareg(m.gen, RMS.Value)
bubble(m.gen.reg, studlab = F)
dev.off()
m.mratio <- rma(yi = es,
sei = se,
data = data_control,
method = "REML",
mods = male.ratio,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_mratioReg.txt", sep = ""), fsep = "\\")); print(m.mratio); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_mratio_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
Male.Ratio <- data_control$male.ratio
m.gen.reg <- metareg(m.gen, Male.Ratio)
bubble(m.gen.reg, studlab = F)
dev.off()
m.frequency <- rma(yi = es,
sei = se,
data = data_control,
method = "REML",
mods = frequency,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_freqReg.txt", sep = ""), fsep = "\\")); print(m.frequency); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_fre_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
Frequency <- data_control$frequency
m.gen.reg <- metareg(m.gen, Frequency)
bubble(m.gen.reg, studlab = F)
dev.off()
m.pulse <- rma(yi = es,
sei = se,
data = data_control,
method = "REML",
mods = pulse.width,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_pulseReg.txt", sep = ""), fsep = "\\")); print(m.pulse); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_pulse_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
Pulse.Width <- data_control$pulse.width
m.gen.reg <- metareg(m.gen, Pulse.Width)
bubble(m.gen.reg, studlab = F)
dev.off()
m.age <- rma(yi = es,
sei = se,
data = data_control,
method = "REML",
mods = age.total,
test = "knha")
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_ageReg.txt", sep = ""), fsep = "\\")); print(m.age); sink()
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_age_meta.png", sep = "")), width = 3500, height = 2600, res = 300)
Age <- data_control$age.total
m.gen.reg <- metareg(m.gen, Age)
bubble(m.gen.reg, studlab = F)
dev.off()
minf <- multimodel.inference(TE = "es",
seTE = "se",
data = data_control,
predictors = c("rms.value",
"charge.per.session",
"frequency",
"pulse.width",
"age.total"),
interaction = F)
png(file = file.path(resultPathPost, param, "meta-regression", paste(param, "_MInference.png", sep = "")), width = 3500, height = 2600, res = 300)
plot(minf)
dev.off()
sink(file.path(resultPathPost, param, "meta-regression", paste(param, "_modelSelection.txt", sep = ""), fsep = "\\")); print(minf); sink()
}
# dur-pre Meta-analysis
dataDur <- data %>% filter(design == "control" &
!is.na(mean.pre.active) & !is.na(mean.pre.sham) &
!is.na(mean.dur.sham) & !is.na(mean.dur.active))
if (nrow(dataDur) >= 3){
# See if there is any study with no pre-dur data (just includes difference score data)
if (param == "RMSSD"){
dataDurExcept <- data %>% filter(design == "control" &
is.na(mean.pre.active) & is.na(mean.pre.sham) &
!is.na(mean.dur.difference.active) & !is.na(mean.dur.difference.sham))
durExcept <- nrow(dataDurExcept)
}
if (exists("durExcept") && durExcept != 0){
for (ind in 1:durExcept){
exTreatment <- escalc(measure = "SMCC",
m1i = dataDurExcept$mean.dur.difference.active[ind],
m2i = 0,
sd1i = dataDurExcept$sd.dur.difference.active[ind],
sd2i = 0,
ni = dataDurExcept$n.active[ind],
ri = corr)
exControl <- escalc(measure = "SMCC",
m1i = dataDurExcept$mean.dur.difference.sham[ind],
m2i = 0,
sd1i = dataDurExcept$sd.dur.difference.sham[ind],
sd2i = 0,
ni = dataDurExcept$n.sham[ind],
ri = corr)
dataDur$es[dataDur$Author == dataDurExcept$Author[ind]] <- exTreatment$yi - exControl$yi
dataDur$se[dataDur$Author == dataDurExcept$Author[ind]] <- exTreatment$vi + exControl$vi
}
}
treatment_ef <- escalc(measure = "SMCR",
m1i = mean.dur.active,
m2i = mean.pre.active,
sd1i = sd.pre.active,
ni = n.active,
ri = ri,
data = dataDur)
control_ef <-  escalc(measure = "SMCR",
m1i = mean.dur.sham,
m2i = mean.pre.sham,
sd1i = sd.pre.sham,
ni = n.sham,
ri = ri,
data = dataDur)
dataDur %<>% mutate(es = treatment_ef$yi - control_ef$yi,
se = treatment_ef$vi + control_ef$vi)
dataDur$se <- dataDur$se ^ .5
# Pooled effects
m.gen <- metagen(TE = es,
seTE = se,
studlab = Author,
data = dataDur,
sm = "SMD",
fixed = FALSE,
random = TRUE,
method.tau = "REML",
hakn = TRUE,
title = paste(param, "_tVNS"))
sink(file.path(resultPathDur, param, paste(param, "_meta-analysis.txt", sep = ""), fsep = "\\")); print(m.gen); sink()
# Export graphs
png(file = file.path(resultPathDur, param, paste(param, "_forestplot.png", sep = "")), width = 3500, height = 2600, res = 300)
forest.meta(m.gen,
layout = "meta",
sortvar = TE,
print.tau2 = TRUE,
prediction = TRUE,
leftlabs = c("Study"),
leftcols = c("studlab"),
colgap.forest.left = "7cm",
colgap.forest.right = "2cm",
xlim = c(-3, 3)
)
dev.off()
png(file = file.path(resultPathDur, param, paste(param, "_drapery.png", sep = "")), width = 3500, height = 3500, res = 300)
drapery(m.gen,
labels = FALSE,
study.results = TRUE,
type = "pval",
legend = TRUE)
dev.off()
}
}
wholeData$stim.type[wholeData$stim.type == "burst"] <- "intermittent"
wholeData$stim.type[wholeData$stim.type == "slow burst"] <- "intermittent"
wholeData$ESSym <- wholeData$es
wholeData$ESSym[wholeData$ESSym > 0] <-  "Positive Effect Size"
wholeData$ESSym[wholeData$ESSym < 0] <-  "Negative Effect Size"
write.csv(wholeData, file.path(resultPathPost, "Extras", "wholeData.csv", sep = ""))
data <- data.frame(
root=rep("root", nrow(wholeData)),
group=wholeData$index,
subgroup= wholeData$ESSym,
subsubgroup= wholeData$intervention,
subsubsubgroup=wholeData$pulse.width,
subsubsubsubgroup=wholeData$frequency,
subsubsubsubsubgroup=wholeData$Author,
value=abs(wholeData$ES)
)
data <- data.frame(
root=rep("root", nrow(wholeData)),
group=wholeData$index,
subgroup= wholeData$ESSym,
subsubgroup= wholeData$intervention,
subsubsubgroup=wholeData$pulse.width,
subsubsubsubgroup=wholeData$frequency,
subsubsubsubsubgroup=wholeData$Author,
value=abs(wholeData$es)
)
data$pathString <- paste("world", data$group,
data$subgroup,
data$subsubgroup,
data$subsubsubgroup,
data$subsubsubsubgroup,
data$subsubsubsubsubgroup, sep = "/")
population <- as.Node(data)
plot <- circlepackeR(population, size = "value", color_min = "#F7F2AB", color_max = "#AB0000")
saveWidget(plot, file = file.path(resultPathPost, "Extras", "circularPacking_Sym_Int_Pulse_Freq_Stud.html"))
names(wholeData)[names(wholeData) == "Effect Size"] <- "ES"
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 2.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
names(wholeData)[names(wholeData) == "Effect Size"] <- "ES"
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 2.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
names(wholeData)[names(wholeData) == "es"] <- "ES"
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 2.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = "Greens"),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = "Plasma"),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = "magma"),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = scale_fill_distiller()),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = scale_fill_distiller()),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = scale_fill_distiller()),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")),
colorway = c("#636EFA", "#EF553B", "#00CC96"))
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")),
colorway = c("#636EFA", "#EF553B", "#00CC96"))
fig
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers", colorscale = "magma") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = "magma"),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5, colorscale = "magma"),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
fig
for (param in Params){
fig <- plot_ly(wholeData[wholeData$index == param, ], x = ~frequency, y = ~pulse.width, z = ~-log(charge.per.session),
color = ~ES, text = ~Author, size = ~abs(ES),
marker = list(opacity = 0.8, sizemode = "diameter", sizeref = 1.5),
type = "scatter3d", mode = "markers") %>%
layout(title = paste("3D Scatter for", param, "Index"), scene = list(
xaxis = list(title = "Frequency"),
yaxis = list(title = "Pulse Width"),
zaxis = list(title = "-log(Charge per Session)")))
saveWidget(fig, file = file.path(resultPathPost, "Extras", paste(param, "_", "3DScatter.html", sep = "")))
}
